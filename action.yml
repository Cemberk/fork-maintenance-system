# Â© 2024 Cemberk. All rights reserved.
name: "Fork Maintenance System"
description: "A GitHub Action to maintain forked repositories by checking for misspellings, resolving merge conflicts, running regression triage, and providing code suggestions."
author: "Cemberk"


inputs:
  github_token:
    description: "GitHub token for authentication"
    required: true
  upstream_repo:
    description: "URL of the upstream repository"
    required: true
  schedule_json:
    description: "Schedule JSON containing upstream and downstream release branches"
    required: true
  pr_branch_prefix:
    description: "Prefix for the PR branch name"
    required: true
  unit_test_command:
    description: "Command to run unit tests"
    required: true
  performance_test_command:
    description: "Command to run performance tests"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        token: $GITHUB_TOKEN
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      shell: bash

    - name: Fetch schedule JSON
      run: echo '${{ inputs.schedule_json }}' > schedule.json
      shell: bash

    - name: Extract branch information
      id: extract_branches
      run: |
        export UPSTREAM_MAIN=$(jq -r '.upstream_main_branch' schedule.json)
        export UPSTREAM_RELEASE=$(jq -r '.upstream_release_branch' schedule.json)
        export DOWNSTREAM_MAIN=$(jq -r '.downstream_main_branch' schedule.json)
        export DOWNSTREAM_DEVELOP=$(jq -r '.downstream_develop_branch' schedule.json)
        export DOWNSTREAM_TESTING=$(jq -r '.downstream_testing_branch' schedule.json)
        export COMMITS=$(jq -r '[.commits[]] | join(",")' schedule.json)
        echo "UPSTREAM_MAIN=$UPSTREAM_MAIN" >> $GITHUB_ENV
        echo "UPSTREAM_RELEASE=$UPSTREAM_RELEASE" >> $GITHUB_ENV
        echo "DOWNSTREAM_MAIN=$DOWNSTREAM_MAIN" >> $GITHUB_ENV
        echo "DOWNSTREAM_DEVELOP=$DOWNSTREAM_DEVELOP" >> $GITHUB_ENV
        echo "DOWNSTREAM_TESTING=$DOWNSTREAM_TESTING" >> $GITHUB_ENV
        echo "COMMITS=$COMMITS" >> $GITHUB_ENV
      shell: bash
    
    - name: Add upstream remote
      run: |
        git remote add upstream ${{ inputs.upstream_repo }}
        git remote set-url --push upstream no_push
      shell: bash
    
    - name: Fetch upstream changes
      run: |
        git fetch upstream
        git fetch --all
        #git branch
        #git fetch "origin/${{ env.DOWNSTREAM_MAIN }}"
        #git fetch "origin/${{ env.DOWNSTREAM_DEVELOP }}"
        #git checkout "origin/${{ env.DOWNSTREAM_MAIN }}"
        #git switch -c ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) upstream/$UPSTREAM_MAIN
      shell: bash

    - name: Find or Create Approval Issue
      id: find_or_create_issue
      run: |
        ISSUE_TITLE="Rebase Approval for Branches"
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        existing_issue=$(gh issue list --repo "$REPO_OWNER/$REPO_NAME" --search "$ISSUE_TITLE" --json number --jq '.[0].number')
        if [ -z "$existing_issue" ]; then
          ISSUE_BODY="This issue contains the test results for the upstream sync, develop PR, and release testing branches. Comment 'proceed with rebase' to approve. Close when maintenance is complete or there will be problems on the next run."
          created_issue=$(gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --repo "$REPO_OWNER/$REPO_NAME")
          issue_number=$(echo "$created_issue" | grep -oP 'https://github\.com/.+?/issues/\K[0-9]+')
          echo "issue_number=$issue_number" >> $GITHUB_ENV
        else
          echo "issue_number=$existing_issue" >> $GITHUB_ENV
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Check for Comment Approval
      id: check_comment
      run: |
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        comments=$(gh issue view ${{ env.issue_number }} --repo "$REPO_OWNER/$REPO_NAME" --json comments --jq '.comments[].body')
        if echo "$comments" | grep -q 'proceed with rebase'; then
          echo "rebase_approved=true" >> $GITHUB_ENV
        else
          echo "rebase_approved=false" >> $GITHUB_ENV
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Checkout and update downstream main
      run: |
        git checkout ${{ env.DOWNSTREAM_MAIN }} # || git checkout -b ${{ env.DOWNSTREAM_MAIN }} upstream/${{ env.UPSTREAM_MAIN }}
        git pull origin ${{ env.DOWNSTREAM_MAIN }}
      shell: bash

    - name: Rebase upstream main into downstream main
      run: |
        git rebase upstream/${{ env.UPSTREAM_MAIN }} || true
        #git checkout -b ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d)
        #git push origin ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d)
      shell: bash

    - name: Push rebased downstream main #TODO push if comment pass 
      #if: env.merge_approved == 'true' #approval is for all 3 steps so results on same issue  
      if: env.rebase_approved == 'true'
      run: |
        git push origin ${{ env.DOWNSTREAM_MAIN }} --force
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    #- name: Create Pull Request for upstream sync
    #  run: |
    #    gh pr create --title "Automated PR: Upstream Sync into ${{ env.DOWNSTREAM_MAIN }}" --body "This PR was created automatically by the Fork Maintenance System to sync changes from the upstream main into the downstream main." --base origin/${{ env.DOWNSTREAM_MAIN }} --head upstream/${{ env.UPSTREAM_MAIN }}
    #    #${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) 
    #    #upstream/${{ env.UPSTREAM_MAIN }}
    #  env:
    #    GITHUB_TOKEN: ${{ inputs.github_token }}
    #  shell: bash

    #- name: upstream changes
    #  run: |
    #    git switch -c ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) upstream/$UPSTREAM_MAIN
    #  shell: bash

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        #pip install -r requirements.txt
        pip install pytest
        pip install -e .
      shell: bash

    - name: Run unit tests for upstream sync
      if: env.rebase_approved == 'false'
      run: |
        echo "Running unit tests for upstream sync..."
        echo "" > UNIT_TEST_RESULTS.txt
        ${{ inputs.unit_test_command }} 2>&1 | tee UNIT_TEST_RESULTS.txt  || true
        echo "Unit Test Results: $(cat UNIT_TEST_RESULTS.txt)"
        echo "UNIT_TEST_RESULTS=$(cat UNIT_TEST_RESULTS.txt)" >> $GITHUB_ENV
      shell: bash

    #- name: Run unit tests for upstream sync
    #  run: |
    #    echo "Running unit tests for upstream sync..."
    #    UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
    #    echo "Unit Test Results: $UNIT_TEST_RESULTS"
    #    echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
    #  shell: bash

    - name: Run performance tests for upstream sync
      if: env.rebase_approved == 'false'
      run: |
        echo "Running performance tests for upstream sync..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1") || true
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    #- name: Comment test results on upstream sync PR
    #  run: |
    #    UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
    #    PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
    #    git checkout ${{ env.DOWNSTREAM_MAIN }}
    #    PR_URL_UPSTREAM_SYNC=$(gh pr view --json url -q .url)
    #    echo "Commenting test results on upstream sync PR..."
    #    gh pr comment $PR_URL_UPSTREAM_SYNC -b "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT"
    #  shell: bash
    #  env:
    #    GITHUB_TOKEN: ${{ inputs.github_token }}
    #    UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
    #    PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}

    ##- name: Create Issue with test results for upstream sync
    ##  run: |
    ##    UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
    ##    PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
    ##    ISSUE_BODY="${UNIT_TEST_COMMENT}\n\n${PERFORMANCE_TEST_COMMENT}"
    ##    REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
    ##    REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
    ##    echo "repo owner ${REPO_OWNER}"
    ##    echo "repo name ${REPO_NAME}"
    ##    gh issue create --repo "$REPO_OWNER/$REPO_NAME" --title "Test Results for sync branch ${{ env.DOWNSTREAM_MAIN }}" --body "$ISSUE_BODY"
    ##  shell: bash
    ##  env:
    ##    GITHUB_TOKEN: ${{ inputs.github_token }}
    ##    UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
    ##    PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}

    - name: Append Test Results to Issue
      if: env.rebase_approved == 'false'
      run: |
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        UNIT_TEST_COMMENT="### Unit Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        gh issue comment ${{ env.issue_number }} --body "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT" --repo "$REPO_OWNER/$REPO_NAME"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}  


    #rebase from main to develop 
    #- name: Attempt to rebase downstream main into develop
    #  run: |
    #    git checkout $DOWNSTREAM_DEVELOP
    #    git pull origin downstream_main
#git checkout -b tmp-develop-merge
    #    #git checkout -b tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
    #    git switch -c tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
    #    git rebase $DOWNSTREAM_MAIN || true
    #    #upstream/$UPSTREAM_MAIN
    #  shell: bash

    - name: Checkout downstream main branch
      run: |
        rm -f UNIT_TEST_RESULTS.txt schedule.json
        git checkout -b tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d) origin/$DOWNSTREAM_DEVELOP
        git rebase origin/$DOWNSTREAM_MAIN  || true
      shell: bash

    #- name: Checkout downstream main branch
    #  run: git checkout -b tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d) origin/$DOWNSTREAM_MAIN
    #  shell: bash

    #- name: Rebase develop onto tmp-sync-branch
    #  run: |
    #    git checkout $DOWNSTREAM_DEVELOP
    #    git rebase tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d) || true
    #  shell: bash

    - name: Check for rebase conflicts
      id: check_conflicts
      run: |
        git ls-files -u
        if git ls-files -u | grep -q '^'; then
          echo "Rebase conflicts detected."
          echo "conflicts=true" >> $GITHUB_ENV
        else
          echo "No rebase conflicts."
          echo "conflicts=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Commit conflict markers
      if: env.conflicts == 'true'
      run: |
        git status
        git add . 
        #-u
        GIT_EDITOR=true git rebase --continue || true
        #git commit -m "Mark conflict markers for review"
      shell: bash

    #push the rebased branch to develop 
    - name: Push rebased branch
      run: |
        #git checkout tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
        git push origin tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d) --force
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Create Pull Request for downstream main to develop sync
      id: create_pr
      run: |
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        PR_URL=$(gh pr create --repo "$REPO_OWNER/$REPO_NAME" --title "Automated PR: Downstream develop rebase new changes" --body "This PR was created automatically by the Fork Maintenance System to sync changes from the downstream main into downstream develop." --base ${DOWNSTREAM_DEVELOP} --head $REPO_OWNER:tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d))
        PR_NUMBER=$(echo $PR_URL | awk -F '/' '{print $NF}')
        echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      shell: bash

    - name: Create suggestions for conflicts
      if: env.conflicts == 'true'
      run: |
        git diff --name-only --diff-filter=U | while read file; do
          # Split the file into ancestor, our-version, and their-version
          git show :1:"$file" > ancestor.txt || echo "" > ancestor.txt
          git show :2:"$file" > our-version.txt || echo "" > our-version.txt
          git show :3:"$file" > their-version.txt || echo "" > their-version.txt
          
          # Create conflict suggestions for each conflict in the file
          conflict_markers=$(grep -n '<<<<<<<' $file | cut -d: -f1)
          for marker in $conflict_markers; do
            LINE_NUMBER=$((marker+1))
            echo $marker
            diff3 -m our-version.txt ancestor.txt their-version.txt > conflict_$LINE_NUMBER.txt
            
            # Post suggestion for this conflict
            COMMENT_BODY="### Conflict detected in \`$file\` at line $LINE_NUMBER\n\`\`\`diff\n$(cat conflict_$LINE_NUMBER.txt)\n\`\`\`\nPlease resolve the conflict by keeping the necessary changes."
            
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ inputs.github_token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository_owner }}/$(basename ${{ github.repository }})/pulls/${{ env.PR_NUMBER }}/comments \
              -d "{\"body\":\"${COMMENT_BODY}\",\"commit_id\":\"${{ github.event.pull_request.head.sha }}\",\"path\":\"$file\",\"line\":$LINE_NUMBER,\"side\":\"RIGHT\"}"
          done
        done
      shell: bash


    #- name: Install Reviewdog
    #  if: env.conflicts == 'true'
    #  run: |
    #    curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b /usr/local/bin
    #  shell: bash

    #- name: Create suggestions for conflicts
    #  if: env.conflicts == 'true'
    #  run: |
    #    git diff --name-only --diff-filter=U | while read file; do
    #      git show :1:"$file" > ancestor.txt
    #      git show :2:"$file" > our-version.txt || echo "" > our-version.txt
    #      git show :3:"$file" > their-version.txt || echo "" > their-version.txt
    #      diff3 -m our-version.txt ancestor.txt their-version.txt > conflicts.txt
    #      reviewdog -f=diff < conflicts.txt || true
    #    done
    #  shell: bash

    #- name: Create suggestions for conflicts
    #  if: env.conflicts == 'true'
    #  run: |
    #    git diff --name-only --diff-filter=U | while read file; do
    #      if git ls-files -u "$file" | grep -q ':1:'; then
    #        git show :1:"$file" > ancestor.txt
    #      else
    #        echo "" > ancestor.txt
    #      fi
    #      if git ls-files -u "$file" | grep -q ':2:'; then
    #        git show :2:"$file" > our-version.txt
    #      else
    #        echo "" > our-version.txt
    #      fi
    #      if git ls-files -u "$file" | grep -q ':3:'; then
    #        git show :3:"$file" > their-version.txt
    #      else
    #        echo "" > their-version.txt
    #      fi
    #      diff3 -m our-version.txt ancestor.txt their-version.txt > conflicts.txt
    #      reviewdog -f=diff < conflicts.txt || true
    #    done
    #  shell: bash

    #- name: Create Pull Request for upstream sync
    #  run: |
    #    REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
    #    REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
    #    gh pr create --repo "$REPO_OWNER/$REPO_NAME" --title "Automated PR: Downstream develop rebase new changes" --body "This PR was created automatically by the Fork Maintenance System to sync changes from the downstream main into downstream develop." --base origin/${DOWNSTREAM_DEVELOP} --head tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
    #    #${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) 
    #    #upstream/${{ env.UPSTREAM_MAIN }}
    #  env:
    #    GITHUB_TOKEN: ${{ inputs.github_token }}
    #  shell: bash

    

    
    
    #- name: Run reviewdog to suggest conflict resolutions
    #  if: env.conflicts == 'true'
    #  uses: reviewdog/action-suggester@v1
    #  with:
    #    github_token: ${{ inputs.github_token }}
    #    tool_name: 'merge-conflict-suggester'
    #    level: 'warning'
    #    filter_mode: 'diff_context'
    #    fail_on_error: 'false'
    #    cleanup: 'true'

    #- name: Create Pull Request for Downstream develop
    #  #if: env.conflicts == 'false'
    #  uses: peter-evans/create-pull-request@v4
    #  id: create_pr_develop
    #  with:
    #    token: ${{ inputs.github_token }}
    #    base: ${{ inputs.downstream_develop_branch }}
    #    branch: tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
    #    #head: tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
    #    title: "Automated PR: Rebase ${ UPSTREAM_MAIN } into ${ DOWNSTREAM_DEVELOP }"
    #    body: "This PR was created automatically by the Fork Maintenance System to rebase changes from Downstream main into the develop branch."
    #    draft: false

    - name: Install 
      run: |
        pip install -e .
      shell: bash

    #develop tests 
    - name: Run unit tests for develop
      if: env.rebase_approved == 'false'
      run: |
        echo "Running unit tests for develop..."
        UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
        echo "Unit Test Results: $UNIT_TEST_RESULTS"
        echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Run performance tests for develop
      if: env.rebase_approved == 'false'
      run: |
        echo "Running performance tests for develop..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1")
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    ##- name: Comment test results on develop PR
    ##  run: |
    ##    UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
    ##    PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
    ##    #PR_URL_DEVELOP=$PR_URL    #(jq -r '.html_url' ${{ steps.create_pr_develop.outputs.pull_request }})
    ##    echo "Commenting test results on develop PR..."
    ##    gh pr comment $PR_URL -b "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT"
    ##  shell: bash
    ##  env:
    ##    GITHUB_TOKEN: ${{ inputs.github_token }}
    ##    UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
    ##    PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}

    - name: Append Test Results to Issue
      if: env.rebase_approved == 'false'
      run: |
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        UNIT_TEST_COMMENT="### Unit Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        gh issue comment ${{ env.issue_number }} --body "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT" --repo "$REPO_OWNER/$REPO_NAME"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}


    #cherry pick from develop to new branch release
    #Downstream develop -> release
    - name: Create new Downstream release branch from latest release
      run: |
        git checkout upstream/$UPSTREAM_RELEASE
        git checkout -b $DOWNSTREAM_TESTING
      shell: bash

    - name: Cherry-pick specific commits from develop to release
      run: |
        IFS=',' read -r -a commit_array <<< "$COMMITS"
        for commit in "${commit_array[@]}"; do
          git cherry-pick $commit || true
        done
      shell: bash

    #push new branch 
    - name: Push new testing branch
      if: env.rebase_approved == 'true'
      run: |
        git push origin ${DOWNSTREAM_TESTING} --force
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Install 
      run: |
        pip install -e .
      shell: bash

    - name: Run unit tests for release
      if: env.rebase_approved == 'false'
      run: |
        echo "Running unit tests for release..."
        UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
        echo "Unit Test Results: $UNIT_TEST_RESULTS"
        echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Run performance tests for release
      if: env.rebase_approved == 'false'
      run: |
        echo "Running performance tests for release..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1")
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    ##- name: Create Issue with test results for release
    ##  run: |
    ##    UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
    ##    PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
    ##    ISSUE_BODY="${UNIT_TEST_COMMENT}\n\n${PERFORMANCE_TEST_COMMENT}"
    ##    REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
    ##    REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
    ##    gh issue create --repo "$REPO_OWNER/$REPO_NAME" --title "Test Results for release branch ${{ env.DOWNSTREAM_TESTING }}" --body "$ISSUE_BODY"
    ##  shell: bash
    ##  env:
    ##    GITHUB_TOKEN: ${{ inputs.github_token }}
    ##    UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
    ##    PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}

    - name: Append Test Results to Issue
      if: env.rebase_approved == 'false'
      run: |
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        UNIT_TEST_COMMENT="### Unit Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results for ${{ env.BRANCH_NAME }}\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        gh issue comment ${{ env.issue_number }} --body "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT" --repo "$REPO_OWNER/$REPO_NAME"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}



# Example schedule.json
# {
#   "upstream_main_branch": "main",
#   "upstream_release_branch": "release-v1.0",
#   "downstream_testing_branch": "v6.3testing",
#   "downstream_develop_branch": "develop",
#   "commits": [
#     "abcd1234",
#     "efgh5678"
#   ]
# }


    
#  regression_triage_test_script:
#    description: "triage script for unit tests"
#    required: true

#    - name: Run regression triage
#      run: |
#        chmod +x ${{ inputs.regression_triage_test_script }}
#        ./${{ inputs.regression_triage_test_script }}
#      env:
#        GITHUB_TOKEN: ${{ inputs.github_token }}
