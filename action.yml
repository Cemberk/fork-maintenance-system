# Â© 2024 Cemberk. All rights reserved.
name: "Fork Maintenance System"
description: "A GitHub Action to maintain forked repositories by checking for misspellings, resolving merge conflicts, running regression triage, and providing code suggestions."
author: "Cemberk"


inputs:
  github_token:
    description: "GitHub token for authentication"
    required: true
  upstream_repo:
    description: "URL of the upstream repository"
    required: true
  schedule_json:
    description: "Schedule JSON containing upstream and downstream release branches"
    required: true
  pr_branch_prefix:
    description: "Prefix for the PR branch name"
    required: true
  unit_test_command:
    description: "Command to run unit tests"
    required: true
  performance_test_command:
    description: "Command to run performance tests"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      shell: bash

    - name: Fetch schedule JSON
      run: echo '${{ inputs.schedule_json }}' > schedule.json
      shell: bash

    - name: Extract branch information
      id: extract_branches
      run: |
        export UPSTREAM_MAIN=$(jq -r '.upstream_main_branch' schedule.json)
        export UPSTREAM_RELEASE=$(jq -r '.upstream_release_branch' schedule.json)
        export DOWNSTREAM_MAIN=$(jq -r '.downstream_main_branch' schedule.json)
        export DOWNSTREAM_DEVELOP=$(jq -r '.downstream_develop_branch' schedule.json)
        export DOWNSTREAM_TESTING=$(jq -r '.downstream_testing_branch' schedule.json)
        export COMMITS=$(jq -r '[.commits[]] | join(",")' schedule.json)
        echo "UPSTREAM_MAIN=$UPSTREAM_MAIN" >> $GITHUB_ENV
        echo "UPSTREAM_RELEASE=$UPSTREAM_RELEASE" >> $GITHUB_ENV
        echo "DOWNSTREAM_MAIN=$DOWNSTREAM_MAIN" >> $GITHUB_ENV
        echo "DOWNSTREAM_DEVELOP=$DOWNSTREAM_DEVELOP" >> $GITHUB_ENV
        echo "DOWNSTREAM_TESTING=$DOWNSTREAM_TESTING" >> $GITHUB_ENV
        echo "COMMITS=$COMMITS" >> $GITHUB_ENV
      shell: bash
    
    - name: Add upstream remote
      run: |
        git remote add upstream ${{ inputs.upstream_repo }}
        git remote set-url --push upstream no_push
      shell: bash
    
    - name: Fetch upstream changes
      run: |
        git fetch upstream
        git fetch --all
        #git branch
        #git fetch "origin/${{ env.DOWNSTREAM_MAIN }}"
        #git fetch "origin/${{ env.DOWNSTREAM_DEVELOP }}"
        #git checkout "origin/${{ env.DOWNSTREAM_MAIN }}"
        #git switch -c ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) upstream/$UPSTREAM_MAIN
      shell: bash

    - name: Checkout and update downstream main
      run: |
        git checkout ${{ env.DOWNSTREAM_MAIN }} || git checkout -b ${{ env.DOWNSTREAM_MAIN }} upstream/${{ env.UPSTREAM_MAIN }}
        git pull origin ${{ env.DOWNSTREAM_MAIN }}
      shell: bash

    - name: Rebase upstream main into downstream main
      run: |
        git rebase upstream/${{ env.UPSTREAM_MAIN }} || true
        #git checkout -b ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d)
        #git push origin ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d)
      shell: bash

    - name: Push rebased downstream main
      run: |
        git push origin ${{ env.DOWNSTREAM_MAIN }} --force
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    
    #- name: Create new branch
    #  run: |
    #    git checkout -b ${{ inputs.pr_branch_prefix }}-$(date +%Y%m%d)
    #  shell: bash

    #Upstream sync pr 
    #- name: Create Pull Request for upstream sync
    #  uses: peter-evans/create-pull-request@v4
    #  id: create_pr_upstream_sync
    #  with:
    #    token: ${{ inputs.github_token }}
    #    base: origin/${{ inputs.downstream_main_branch }}
    #    head: ${{ inputs.pr_branch_prefix }}-$(date +%Y%m%d)
    #    title: "Automated PR: Upstream Sync into ${ DOWNSTREAM_MAIN }"
    #    body: "This PR was created automatically by the Fork Maintenance System to sync changes from the upstream main into the downstream main."
    #    draft: false

    #- name: Push branch and create PR for upstream sync
    #    run: gh pr create --title "Automated PR: Upstream Sync into ${{ env.DOWNSTREAM_MAIN }}" --body "This PR was created automatically by the Fork Maintenance System to sync changes from the upstream main into the downstream main." --base ${{ env.DOWNSTREAM_MAIN }} --head upstream/${{ inputs.upstream_main_branch }}
    #    env:
    #      GITHUB_TOKEN: ${{ inputs.github_token }}
    #    shell: bash

    #- name: Create Pull Request for upstream sync
    #  run: |
    #    gh pr create --title "Automated PR: Upstream Sync into ${{ env.DOWNSTREAM_MAIN }}" --body "This PR was created automatically by the Fork Maintenance System to sync changes from the upstream main into the downstream main." --base origin/${{ env.DOWNSTREAM_MAIN }} --head upstream/${{ env.UPSTREAM_MAIN }}
    #    #${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) 
    #    #upstream/${{ env.UPSTREAM_MAIN }}
    #  env:
    #    GITHUB_TOKEN: ${{ inputs.github_token }}
    #  shell: bash

    #- name: upstream changes
    #  run: |
    #    git switch -c ${{ inputs.pr_branch_prefix }}-sync-test-$(date +%Y%m%d) upstream/$UPSTREAM_MAIN
    #  shell: bash

    - name: Install dependencies
      run: |
        pip install pytest
      shell: bash

    - name: Run unit tests for upstream sync
      run: |
        echo "Running unit tests for upstream sync..."
        UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
        echo "Unit Test Results: $UNIT_TEST_RESULTS"
        echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Run performance tests for upstream sync
      run: |
        echo "Running performance tests for upstream sync..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1")
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Comment test results on upstream sync PR
      run: |
        UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        git checkout ${{ env.DOWNSTREAM_MAIN }}
        PR_URL_UPSTREAM_SYNC=$(gh pr view --json url -q .url)
        echo "Commenting test results on upstream sync PR..."
        gh pr comment $PR_URL_UPSTREAM_SYNC -b "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}

    #rebase from main to develop 
    - name: Attempt to rebase upstream main into develop
      run: |
        git checkout $DOWNSTREAM_DEVELOP
        git checkout -b tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
        git rebase upstream/$UPSTREAM_MAIN || true
      shell: bash

    - name: Check for rebase conflicts
      id: check_conflicts
      run: |
        if git ls-files -u | grep -q '^'; then
          echo "Rebase conflicts detected."
          echo "conflicts=true" >> $GITHUB_ENV
        else
          echo "No rebase conflicts."
          echo "conflicts=false" >> $GITHUB_ENV
      shell: bash

    #push the rebased branch to develop 
    - name: Push rebased branch
      run: |
        git push origin tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
    
    - name: Run reviewdog to suggest conflict resolutions
      if: env.conflicts == 'true'
      uses: reviewdog/action-suggester@v1
      with:
        github_token: ${{ inputs.github_token }}
        tool_name: 'merge-conflict-suggester'
        level: 'warning'
        filter_mode: 'diff_context'
        fail_on_error: 'false'
        cleanup: 'true'

    - name: Create Pull Request for Downstream develop
      if: env.conflicts == 'false'
      uses: peter-evans/create-pull-request@v4
      id: create_pr_develop
      with:
        token: ${{ inputs.github_token }}
        base: ${{ inputs.downstream_develop_branch }}
        head: tmp-${DOWNSTREAM_DEVELOP}-$(date +%Y%m%d)
        title: "Automated PR: Rebase ${ UPSTREAM_MAIN } into ${ DOWNSTREAM_DEVELOP }"
        body: "This PR was created automatically by the Fork Maintenance System to rebase changes from Downstream main into the develop branch."
        draft: false

    #develop tests 
    - name: Run unit tests for develop
      run: |
        echo "Running unit tests for develop..."
        UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
        echo "Unit Test Results: $UNIT_TEST_RESULTS"
        echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Run performance tests for develop
      run: |
        echo "Running performance tests for develop..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1")
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Comment test results on develop PR
      run: |
        UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        PR_URL_DEVELOP=$(jq -r '.html_url' ${{ steps.create_pr_develop.outputs.pull_request }})
        echo "Commenting test results on develop PR..."
        gh pr comment $PR_URL_DEVELOP -b "$UNIT_TEST_COMMENT\n\n$PERFORMANCE_TEST_COMMENT"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}



    #cherry pick from develop to new branch release
    #Downstream develop -> release
    - name: Create new Downstream release branch from latest release
      run: |
        git checkout upstream/$UPSTREAM_RELEASE
        git checkout -b $DOWNSTREAM_TESTING
      shell: bash

    - name: Cherry-pick specific commits from develop to release
      run: |
        IFS=',' read -r -a commit_array <<< "$COMMITS"
        for commit in "${commit_array[@]}"; do
          git cherry-pick $commit || true
        done
      shell: bash

    #push new branch 
    - name: Push new testing branch
      run: |
        git push origin ${DOWNSTREAM_TESTING}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}


    - name: Run unit tests for release
      run: |
        echo "Running unit tests for release..."
        UNIT_TEST_RESULTS=$(eval "${{ inputs.unit_test_command }} 2>&1")
        echo "Unit Test Results: $UNIT_TEST_RESULTS"
        echo "UNIT_TEST_RESULTS=$UNIT_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Run performance tests for release
      run: |
        echo "Running performance tests for release..."
        PERFORMANCE_TEST_RESULTS=$(eval "${{ inputs.performance_test_command }} 2>&1")
        echo "Performance Test Results: $PERFORMANCE_TEST_RESULTS"
        echo "PERFORMANCE_TEST_RESULTS=$PERFORMANCE_TEST_RESULTS" >> $GITHUB_ENV
      shell: bash

    - name: Create Issue with test results for release
      run: |
        UNIT_TEST_COMMENT="### Unit Test Results\n\`\`\`\n${UNIT_TEST_RESULTS}\n\`\`\`"
        PERFORMANCE_TEST_COMMENT="### Performance Test Results\n\`\`\`\n${PERFORMANCE_TEST_RESULTS}\n\`\`\`"
        ISSUE_BODY="${UNIT_TEST_COMMENT}\n\n${PERFORMANCE_TEST_COMMENT}"
        gh issue create --title "Test Results for Release branch ${DOWNSTREAM_TESTING}" --body "$ISSUE_BODY"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        UNIT_TEST_RESULTS: ${{ env.UNIT_TEST_RESULTS }}
        PERFORMANCE_TEST_RESULTS: ${{ env.PERFORMANCE_TEST_RESULTS }}





# Example schedule.json
# {
#   "upstream_main_branch": "main",
#   "upstream_release_branch": "release-v1.0",
#   "downstream_testing_branch": "v6.3testing",
#   "downstream_develop_branch": "develop",
#   "commits": [
#     "abcd1234",
#     "efgh5678"
#   ]
# }


    
#  regression_triage_test_script:
#    description: "triage script for unit tests"
#    required: true

#    - name: Run regression triage
#      run: |
#        chmod +x ${{ inputs.regression_triage_test_script }}
#        ./${{ inputs.regression_triage_test_script }}
#      env:
#        GITHUB_TOKEN: ${{ inputs.github_token }}
